from numpy import *
# الجمع و الطرح 
a=random.randint(7,19,size=9).reshape(3,3)
b=random.randint(7,19,size=9).reshape(3,3)

print(a)
# [[14 15  9]
#  [17  7 13]
#  [16 17 14]]
print('-------------------------')
print(b)
# [[12 12  9]
#  [13  7 18]
#  [12  7 13]]
print('-------------------------')
print(a+b)
# [[26 27 18]
#  [30 14 31]
#  [28 24 27]]
print('-------------------------')
print(a-b)
# [[ 2  3  0]
#  [ 4  0 -5]
#  [ 4 10  1]]
print('-------------------------')




# الضرب و القسمة
a=random.randint(7,19,size=9).reshape(3,3)
b=random.randint(7,19,size=9).reshape(3,3)

print(a)
# [[11 12 16]
#  [14  7 16]
#  [ 7 13  7]]
print('-------------------------')
print(b)
# [[ 9 11 10]
#  [14 10  9]
#  [11 17 15]]
print('-------------------------')
print(a*b)
# [[ 99 132 160]
#  [196  70 144]
#  [ 77 221 105]]
print('-------------------------')
print(a/b)
# [[1.22222222 1.09090909 1.6       ]
#  [1.         0.7        1.77777778]
#  [0.63636364 0.76470588 0.46666667]]
print('-------------------------')



# الضرب و القسمة  علي رقم
a=random.randint(7,19,size=9).reshape(3,3)

print(a)
# [[15 12 13]
#  [18 18 10]
#  [16 10  8]]
print('-------------------------')
print(a*4)
# [[60 48 52]
#  [72 72 40]
#  [64 40 32]]
print('-------------------------')
print(a/5)
# [[3.  2.4 2.6]
#  [3.6 3.6 2. ]
#  [3.2 2.  1.6]]
print('-------------------------')


# دوال للمصفوفة
a=random.randint(1,10,size=9).reshape(3,3)


print(a)
# [[6 8 2]
#  [8 3 4]
#  [6 8 2]]
print('-------------------------')
# [[-0.2794155   0.98935825  0.90929743]
#  [ 0.98935825  0.14112001 -0.7568025 ]
#  [-0.2794155   0.98935825  0.90929743]]
print('-------------------------')
print(a**2)
# [[36 64  4]
#  [64  9 16]
#  [36 64  4]]
print('-------------------------')
print(log(a))
# [[1.79175947 2.07944154 0.69314718]
#  [2.07944154 1.09861229 1.38629436]
#  [1.79175947 2.07944154 0.69314718]]
print('-------------------------')

# ضرب المصفوفات
a=random.randint(0,5,size=6).reshape(3,2)
b=random.randint(0,5,size=6).reshape(2,3)

print(a)
# [[0 3]
#  [4 4]
#  [1 0]]
print('-------------------------')
print(b)
# [[1 3 1]
#  [2 1 3]]
print('-------------------------')
print(dot(a,b))
# [[ 6  3  9]
#  [12 16 16]
#  [ 1  3  1]]
print('-------------------------')


# مجموع القيم
a=random.randint(0,5,size=6).reshape(3,2)
print(a)
# [[1 2]
#  [4 2]
#  [4 3]]
print('-------------------------')

print(a.sum())
# 16
print('-------------------------')

print(sum(a))
# 16
print('-------------------------')

print(sum(a,axis=0))
# [9 7]
print('-------------------------')

print(a.sum(axis=1))
# [3 6 7]
print('-------------------------')

# قيم احصائية
a=random.randint(0,5,size=6).reshape(3,2)
print(a)
# [[3 4]
#  [1 4]
#  [4 3]]
print('-------------------------')

print(a.mean())
# 3.1666666666666665

print(std(a))
# 1.067187372905474

print(var(a))
# 1.1388888888888888



# معامل الارتباط
a =random.randint(5,20, size=9).reshape(3,3)
print(a)
# [[ 7 16 18]
#  [13  6 18]
#  [17 10 13]]
print('-------------------------')
print(corrcoef(a))
# [[ 1.          0.07550194 -0.81803503]
#  [ 0.07550194  1.          0.51176343]
#  [-0.81803503  0.51176343  1.        ]]
print('-------------------------')



# الترتيب الافقي و الرأسي
a=random.randint(0,9,size=9).reshape(3,3)
print(a)
# [[7 2 6]
#  [8 7 1]
#  [2 1 8]]
print('-------------------------')

print(sort(a,axis=0))
# [[2 1 1]
#  [7 2 6]
#  [8 7 8]]
print('-------------------------')

print(sort(a,axis=1))
# [[2 6 7]
#  [1 7 8]
#  [1 2 8]]
print('-------------------------')

a=random.randint(0,8,size=4).reshape(2,2)
print(a)
# [[4 2]
#  [4 7]]
print('-------------------------')

b=linalg.inv(a)
print(b)
# [[ 0.35 -0.1 ]
#  [-0.2   0.2 ]]
print('-------------------------')

print(dot(a,b))
# [[ 1.00000000e+00  0.00000000e+00]
#  [-1.66533454e-16  1.00000000e+00]]













































